# pip install python-telegram-bot==20.6
import json, os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, WebAppInfo, ForceReply
from urllib.parse import urlencode, quote_plus
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import datetime, calendar
import asyncio
from telegram.error import Forbidden, BadRequest, TimedOut

TOKEN = "8413119831:AAHBTOc50t2jshcVTEXUMoNSWABw80VT408"

# –°–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ (–∫–∞–∫ –ø—Ä–∏—Å–ª–∞–ª)
BLOCKS = [
    "IOPL", "LSE", "TPU Logger", "xBM", "NCCM", "CMF", "RM", "HDMA",
    "STM", "CSS", "CIM", "CMM", "FIM", "WLD", "LLHCMQ", "LLHMCTPQ",
    "QM", "ATSM"
]

# –§–∞–π–ª—ã-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–ø—Ä–æ—Å—Ç–∞—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å)
VOTES_PATH = "vp4_votes.json"     # {"<user_id>": {"<block>": score}}
POSTS_PATH = "vp4_posts.json"     # {"<chat_id>": {"main": {"message_id": int}}}
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://aivanou86.github.io/tg_bot/index.html")  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à HTTPS URL
WEBAPP_ENABLED = "1"  # –í–∫–ª—é—á–∞—Ç—å WebApp-–∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ /setdomain
STATUS_KEY_PREFIX = "status:"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ñ–∞–∑ –∏ –ø—Ä–∏—á–∏–Ω –∑–∞–¥–µ—Ä–∂–∫–∏
PHASES = ["VP1", "VP2", "VP3", "VP4", "VP5"]
REASONS = [
    ("mas_doc", "Incomplete or missing MAS documentation"),
    ("spec_not_final", "Specifications not finalized or lack details about new features."),
    ("design_slow", "Slow response from design team"),
    ("design_wait", "Long waiting time for answers on JIRA/e-mail/messenger."),
    ("high_complex", "High block complexity"),
    ("tb_complex", "Testbench complexity"),
    ("immature_rtl", "Immature RTL design"),
    ("late_features", "Late introduction of new features"),
    ("regression_unstable", "Regression instability"),
    ("coverage_gaps", "Coverage gaps"),
    ("xblock_deps", "Cross-block dependencies"),
    ("resource_constraints", "Resource constraints"),
    ("other", "‚úçÔ∏è"),
]

def _load(path, default):
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            return default
    return default

def _save(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def _get_query_chat_id(query):
    try:
        return int(getattr(query, "_chat_id"))
    except Exception:
        pass
    try:
        return int(query.message.chat.id)
    except Exception:
        return None

def _get_thread_id_from_query(query):
    try:
        return getattr(query.message, "message_thread_id", None)
    except Exception:
        return None

def get_votes(ctx):
    if "votes" not in ctx.bot_data:
        ctx.bot_data["votes"] = _load(VOTES_PATH, {})
    return ctx.bot_data["votes"]

def get_posts(ctx):
    if "posts" not in ctx.bot_data:
        ctx.bot_data["posts"] = _load(POSTS_PATH, {})
    return ctx.bot_data["posts"]

def get_status_from_votes(ctx, chat_id_str: str):
    votes = get_votes(ctx)
    key = STATUS_KEY_PREFIX + chat_id_str
    if key not in votes or not isinstance(votes[key], dict):
        votes[key] = {}
    return votes[key]

def get_latest_per_chat_from_votes(ctx, chat_id_str: str):
    # legacy: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–∏—Å—Ç–æ—Ä–∏—è latest —É–¥–∞–ª–µ–Ω–∞)
    return {}

def set_latest_vote(ctx, chat_id_str: str, block: str, score: int, user_id: int):
    # legacy: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–∏—Å—Ç–æ—Ä–∏—è latest —É–¥–∞–ª–µ–Ω–∞)
    return

def save_all(ctx):
    # –í—Å–µ–≥–¥–∞ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –¥–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –ø—É—Å—Ç—ã–º
    votes = get_votes(ctx)
    posts = get_posts(ctx)
    _save(VOTES_PATH, votes)
    _save(POSTS_PATH, posts)

def _ensure_block_state(state_by_chat, chat_id: str, block: str):
    # legacy helper: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    state_by_chat.setdefault(chat_id, {})
    state_by_chat[chat_id].setdefault(block, {"phase": None, "progress": None, "eta": None, "reasons": [], "comment": None})
    return state_by_chat[chat_id][block]

def _format_status_summary(state):
    phase = state.get("phase") or "‚Äî"
    progress = state.get("progress")
    progress_str = f"{progress}%" if isinstance(progress, int) else "‚Äî"
    eta = state.get("eta") or "‚Äî"
    return f"{phase} {progress_str} ‚Ä¢ {eta}"

def _format_reasons_summary(state, max_items: int = 2):
    keys = state.get("reasons") or []
    if not keys:
        return "‚Äî"
    titles = []
    for key, title in REASONS:
        if key in keys:
            titles.append(title)
    if not titles:
        return "‚Äî"
    if len(titles) <= max_items:
        return ", ".join(titles)
    return ", ".join(titles[:max_items]) + f" ‚Ä¶(+{len(titles)-max_items})"

def _md_escape(text: str) -> str:
    if text is None:
        return ""
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
    text = text.replace("\\", "\\\\")
    for ch in ("*", "_", "`"):
        text = text.replace(ch, "\\" + ch)
    return text

def _format_comment_summary(state, max_len: int = 80) -> str:
    comment = (state.get("comment") or "").strip()
    if not comment:
        return "‚Äî"
    one_line = " ".join(comment.split())
    esc = _md_escape(one_line)
    if len(esc) > max_len:
        esc = esc[: max_len - 1] + "‚Ä¶"
    return f"üí¨ {esc}"

def _format_reasons_with_comment(state) -> str:
    reasons = _format_reasons_summary(state)
    comment = _format_comment_summary(state)
    if comment != "‚Äî":
        if reasons == "‚Äî":
            return comment
        return f"{reasons} ‚Ä¢ {comment}"
    return reasons

def _format_block_button_text(block: str, risk: int | None, arrow: str, phase: str | None = None, progress: int | None = None) -> str:
    # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –æ—Ü–µ–Ω–∫–æ–π
    block_padded = (block or "")
    phase_part = ""
    if isinstance(progress, int) or (phase and phase != "‚Äî"):
        prog_str = f":{progress}%" if isinstance(progress, int) else ""
        phase_val = phase or "‚Äî"
        phase_part = f" | {phase_val}{prog_str}"
    if isinstance(risk, int):
        color, _ = get_risk_info(risk)
        return f"{color} {arrow} {block_padded} | {risk}/10{phase_part}"
    return f"‚ö™ {arrow} {block_padded} | ‚Äî{phase_part}"

def _reason_titles_list(state) -> list:
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω (–±–µ–∑ 'other' –∏ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)
    keys = state.get("reasons") or []
    titles_map = {k: t for k, t in REASONS}
    titles = []
    for k in keys:
        if k == "other":
            continue
        t = titles_map.get(k)
        if isinstance(t, str):
            titles.append(t)
    return titles

def _get_other_comment(state):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ 'other'
    reasons = state.get("reasons") or []
    if "other" not in reasons:
        return None
    text = (state.get("comment") or "").strip()
    return text if text else None

def make_keyboard_compact(block: str, current_vote=None) -> InlineKeyboardMarkup:
    # legacy: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    return InlineKeyboardMarkup([])

def get_risk_info(score):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∏—Å–∫–∞"""
    risk_levels = {
        1: ("üü¢", "–≤—Å–µ —à–∏–∫–∞—Ä–Ω–æ"),
        2: ("üü¢", "–æ—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"),
        3: ("üü°", "–Ω–µ–±–æ–ª—å—à–∏–µ —Ä–∏—Å–∫–∏"),
        4: ("üü°", "—É–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫"),
        5: ("üü†", "—Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫"),
        6: ("üü†", "–∑–∞–º–µ—Ç–Ω—ã–π —Ä–∏—Å–∫"),
        7: ("üî¥", "–≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"),
        8: ("üî¥", "–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"),
        9: ("üî¥", "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫"),
        10: ("üî¥", "–æ–≥—Ä–æ–º–Ω—ã–π –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫")
    }
    return risk_levels.get(score, ("‚ö™", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))

def block_text_compact(block: str, votes) -> str:
    # legacy: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç.–∫. —Ç–µ–ø–µ—Ä—å –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å
    return f"{block}"

async def is_admin(update, context):
    chat = update.effective_chat
    user = update.effective_user
    try:
        admins = await context.bot.get_chat_administrators(chat.id)
    except Forbidden:
        return False
    return user.id in {a.user.id for a in admins}

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ VP4.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /survey ‚Äî –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ –≤—Å–µ–º –±–ª–æ–∫–∞–º (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)\n"
        "‚Ä¢ /results ‚Äî –æ–±—â–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –≥–æ–ª–æ—Å–∞–º\n\n"
        "‚Ä¢ /reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –≥–æ–ª–æ—Å–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)\n\n"
        "–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –º–æ–∂–µ—Ç –ª—é–±–æ–π —É—á–∞—Å—Ç–Ω–∏–∫. –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å ‚Äî –∑–∞—Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
    )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ deep-link payload: /start block=<BLOCK>&chat_id=<GROUP_ID>
    try:
        payload = (update.message.text or "").split(" ", 1)
        payload = payload[1] if len(payload) > 1 else ""
        if payload:
            # –ü—Ä–æ—Å—Ç–∞—è —Ä–∞–∑–±–æ—Ä–∫–∞ –ø–∞—Ä—ã –∫–ª—é—á=–∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ &
            params = {}
            for part in payload.split("&"):
                if "=" in part:
                    k, v = part.split("=", 1)
                    params[k] = v
            block = params.get("block")
            group_chat_id = params.get("chat_id")
            if block in BLOCKS and group_chat_id:
                context.user_data["awaiting"] = {"type": "comment", "chat_id": int(group_chat_id), "block": block}
                await update.message.reply_text(
                    f"–û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –±–ª–æ–∫—É {block}. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç ‚Äî –æ–Ω –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {group_chat_id}."
                )
                return
    except Exception:
        pass

    await update.message.reply_text(text)

async def cmd_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –≤ –≥—Ä—É–ø–ø–µ ‚Äî —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏–ª–∏
    if update.effective_chat.type in ("group", "supergroup"):
        if not await is_admin(update, context):
            await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å /survey –≤ –≥—Ä—É–ø–ø–µ.")
            return

    posts = get_posts(context)
    votes = get_votes(context)
    chat_id = str(update.effective_chat.id)
    posts.setdefault(chat_id, {})

    # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –æ–¥–Ω–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–æ–ø—Ä–æ—Å –≤ —ç—Ç–æ–º —á–∞—Ç–µ
    lines = ["üéØ *–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ VP4*\n"]

    chat_id_str = str(update.effective_chat.id)
    status_all = get_status_from_votes(context, chat_id_str)
    posts = get_posts(context)
    chat_posts = posts.setdefault(chat_id_str, {})
    header = chat_posts.get("header")
    if header:
        lines.append(header)
    else:
        lines.append("–û—Ü–µ–Ω–∏—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ —É–ª–æ–∂–∏—Ç—å—Å—è –≤ —Å—Ä–æ–∫ (1-10):")
        lines.append("1 –≤—Å–µ —à–∏–∫–∞—Ä–Ω–æ ‚Ä¢ 10 –æ–≥—Ä–æ–º–Ω—ã–π —Ä–∏—Å–∫\n")
    expanded = set(chat_posts.get("expanded", []))
    
    # –¢–µ–∫—Å—Ç —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫ –ø–æ –±–ª–æ–∫–∞–º ‚Äî –≤—Å—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –∫–∞–∫ –∫–Ω–æ–ø–∫–∏
    
    lines.append("\n_–¢–∞–ø –ø–æ –∫–Ω–æ–ø–∫–µ –±–ª–æ–∫–∞: ‚ñ∏/‚ñæ ‚Äî —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å, ‚öô ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏_")

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –ø–æ –±–ª–æ–∫—É ‚Äî [‚ñ∏/‚ñæ block]; –ø—Ä–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = []
    for block in BLOCKS:
        is_expanded = block in expanded
        arrow = "‚ñæ" if is_expanded else "‚ñ∏"
        bs = status_all.get(block, {}) if isinstance(status_all, dict) else {}
        risk = bs.get("risk") if isinstance(bs, dict) else None
        # –ú–∞–ª–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ + —à–∏—Ä–æ–∫–∞—è –∫–Ω–æ–ø–∫–∞ –±–ª–æ–∫–∞ (—Å —Ñ–∞–∑–æ–π/–ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –ø—Ä—è–º–æ –≤ —Å—Ç—Ä–æ–∫–µ)
        phase_val = (bs.get("phase") or "‚Äî") if isinstance(bs, dict) else None
        prog_val = bs.get("progress") if isinstance(bs, dict) else None
        left_btn = InlineKeyboardButton("‚öô", callback_data=f"vote:{block}")
        right_btn = InlineKeyboardButton(_format_block_button_text(block, risk, arrow, phase_val, prog_val), callback_data=f"toggle:{block}")
        keyboard.append([left_btn, right_btn])
        if is_expanded:
            phase = bs.get("phase") or "‚Äî"
            prog = bs.get("progress")
            prog_str = f"{prog}%" if isinstance(prog, int) else "‚Äî"
            eta = bs.get("eta") or "‚Äî"
            # –í —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ ETA (—Ñ–∞–∑–∞/–ø—Ä–æ—Ü–µ–Ω—Ç—ã —É–∂–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–µ)
            info_text = f"ETA {eta}"
            keyboard.append([
                InlineKeyboardButton("VP4 ETA", callback_data="noop"),
                InlineKeyboardButton(info_text, callback_data="noop")
            ])
            # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—ã –ø–æ—Å—Ç—Ä–æ—á–Ω–æ; –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –º–µ—Ç–∫–æ–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –±–µ–∑ –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–∏
            reason_titles = _reason_titles_list(bs)
            other_comment = _get_other_comment(bs)
            if reason_titles:
                for idx, title in enumerate(reason_titles):
                    if idx == 0:
                        keyboard.append([
                            InlineKeyboardButton("–ü—Ä–∏—á–∏–Ω—ã", callback_data=f"show:reasons:{block}"),
                            InlineKeyboardButton(title, callback_data=f"show:reasons:{block}")
                        ])
                    else:
                        keyboard.append([
                            InlineKeyboardButton(" ", callback_data=f"show:reasons:{block}"),
                            InlineKeyboardButton(title, callback_data=f"show:reasons:{block}")
                        ])
            # '–ò–Ω–æ–µ' (Others) ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ callback)
            if other_comment:
                keyboard.append([
                    InlineKeyboardButton("Others", callback_data="noop"),
                    InlineKeyboardButton(other_comment, callback_data="noop")
                ])

    main_post = posts[chat_id].get("main")
    text = "\n".join(lines)
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –æ–±–Ω–æ–≤–∏–º –µ–≥–æ, –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö
    if main_post and isinstance(main_post, dict) and "message_id" in main_post:
        try:
            await context.bot.edit_message_text(
                chat_id=int(chat_id),
                message_id=main_post["message_id"],
                text=text,
                parse_mode="Markdown",
                reply_markup=reply_markup
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (—É–¥–∞–ª–µ–Ω–æ/–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞) ‚Äî —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
            msg = await update.message.reply_text(
                text,
                parse_mode="Markdown",
                reply_markup=reply_markup
            )
            posts[chat_id]["main"] = {"message_id": msg.message_id}
            save_all(context)
    else:
        # –ï—â–µ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ ‚Äî —Å–æ–∑–¥–∞–¥–∏–º
        msg = await update.message.reply_text(
            text,
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        posts[chat_id]["main"] = {"message_id": msg.message_id}
        save_all(context)

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user

    # –†–∞–∑–±–æ—Ä callback
    if query.data.startswith("toggle:"):
        # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å/—Å–≤–µ—Ä–Ω—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        block = query.data.split(":", 1)[1]
        chat_id_str = str(update.effective_chat.id)
        posts = get_posts(context)
        chat_posts = posts.setdefault(chat_id_str, {})
        expanded = set(chat_posts.get("expanded", []))
        if block in expanded:
            expanded.remove(block)
        else:
            expanded.add(block)
        chat_posts["expanded"] = list(expanded)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ posts, –Ω–µ —Ç—Ä–æ–≥–∞—è votes
        _save(POSTS_PATH, posts)
        await update_main_survey(query, context)
        return
    
    if query.data.startswith("vote:"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –±–ª–æ–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è/—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Äî –º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
        block = query.data[5:]  # —É–±–∏—Ä–∞–µ–º "vote:"
        if block not in BLOCKS:
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –±–ª–æ–∫.", show_alert=True)
            return

        votes = get_votes(context)
        user_vote = votes.get(str(user.id), {}).get(block)

        # –í–∞—Ä–∏–∞–Ω—Ç WebApp: –µ–¥–∏–Ω–∞—è —Ñ–æ—Ä–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–æ–º (–≤–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
        chat_id_str = str(update.effective_chat.id)
        params = f"block={quote_plus(block)}&chat_id={chat_id_str}"
        webapp_row = [InlineKeyboardButton("üß∞ –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É (WebApp)", web_app=WebAppInfo(url=f"{WEBAPP_URL}?{params}"))] if WEBAPP_ENABLED else None
        # –°–æ—Ö—Ä–∞–Ω–∏–º —Å—Ç–∞—Ä—ã–µ —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
        rate_row = [InlineKeyboardButton("üéØ –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤", callback_data=f"rate:{block}")]
        status_row = [InlineKeyboardButton("üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å", callback_data=f"status:{block}")]
        reasons_row = [InlineKeyboardButton("‚è± –ü—Ä–∏—á–∏–Ω—ã —Ä–∏—Å–∫–æ–≤", callback_data=f"reasons:{block}:0")]
        eta_row = [InlineKeyboardButton("üóì ETA", callback_data=f"eta:{block}")]
        back_btn = [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main")]
        keyboard = []
        if webapp_row:
            keyboard.append(webapp_row)
        keyboard += [rate_row, status_row, reasons_row, eta_row, back_btn]

        # –ü–æ–¥–ø–∏—à–µ–º –º–µ–Ω—é: –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π
        menu_text = f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: `{block}`\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        try:
            await query.edit_message_text(menu_text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
        except BadRequest as e:
            if "Button_type_invalid" in str(e) and WEBAPP_ENABLED:
                keyboard_no_webapp = []
                for row in keyboard:
                    if not row:
                        continue
                    btn = row[0]
                    if isinstance(btn, InlineKeyboardButton) and getattr(btn, "web_app", None):
                        continue
                    keyboard_no_webapp.append(row)
                await query.edit_message_text(menu_text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard_no_webapp))
            else:
                raise
        except TimedOut:
            # –ü–æ–≤—Ç–æ—Ä–∏–º –æ–¥–∏–Ω —Ä–∞–∑ —Å –ø–∞—É–∑–æ–π –∏ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
            await asyncio.sleep(1.0)
            await query.edit_message_text(menu_text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
        if user_vote:
            await query.answer(f"–¢–µ–∫—É—â–∞—è: {user_vote}")
        else:
            await query.answer("–û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –æ—Ü–µ–Ω–∫–∏")
        return
    elif query.data.startswith("rate:"):
        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ 1-10 –¥–ª—è –æ—Ü–µ–Ω–∫–∏ (–∫–∞–∂–¥–∞—è –Ω–∞ —Å–≤–æ–µ–π —Å—Ç—Ä–æ–∫–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º)
        block = query.data.split(":", 1)[1]
        if block not in BLOCKS:
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –±–ª–æ–∫.", show_alert=True)
            return
        rows = []
        for i in range(1, 11):
            _, desc = get_risk_info(i)
            text = f"{i} ({desc})"
            rows.append([InlineKeyboardButton(text, callback_data=f"{block}:{i}")])
        rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"vote:{block}")])
        await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(rows))
        await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É")
        return
        
    elif query.data.startswith("back:"):
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å—ë –≤ —ç—Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
        await update_main_survey(query, context)
        return
    
    elif query.data.startswith("status:"):
        block = query.data.split(":", 1)[1]
        if update.effective_chat.type in ("group", "supergroup") and not await is_admin(update, context):
            await query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å.", show_alert=True)
            return
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ —Ñ–∞–∑ VP1..VP5 (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ), –∑–∞—Ç–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        context.user_data["status_only_block"] = block
        await open_status_menu_only_phase(query, context, block, show_progress=False)
        return

    elif query.data.startswith("phase:"):
        _b, phase = query.data.split(":", 1)[1].split("|", 1)
        block = _b
        chat_id_str = str(update.effective_chat.id)
        status_all = get_status_from_votes(context, chat_id_str)
        st = status_all.setdefault(block, {"phase": None, "progress": None, "eta": None, "reasons": [], "comment": None})
        if phase in PHASES:
            st["phase"] = phase
            save_all(context)
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à—ë–ª –∏–∑ –º–µ–Ω—é —Å—Ç–∞—Ç—É—Å–∞, –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ñ–∞–∑—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        if context.user_data.get("status_only_block") == block:
            await open_status_menu_only_phase(query, context, block, show_progress=True)
        else:
            await open_status_menu(query, context, block)
        return

    elif query.data.startswith("progress:"):
        # progress:<block>:<val or txt>
        parts = query.data.split(":")
        block = parts[1]
        action = parts[2] if len(parts) > 2 else ""
        if action == "txt":
            # –ü—Ä–æ—Å–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (ForceReply), –∫–∞–∫ –¥–ª—è ETA/–ò–Ω–æ–≥–æ
            prompt = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è {block} (0-100) –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                reply_markup=ForceReply(input_field_placeholder="0..100", selective=True)
            )
            context.user_data["awaiting"] = {"type": "progress", "chat_id": update.effective_chat.id, "block": block, "reply_to": prompt.message_id, "user_id": query.from_user.id}
        else:
            try:
                val = int(action)
                if 0 <= val <= 100:
                    chat_id_str = str(update.effective_chat.id)
                    status_all = get_status_from_votes(context, chat_id_str)
                    st = status_all.setdefault(block, {"phase": None, "progress": None, "eta": None, "reasons": [], "comment": None})
                    st["progress"] = val
                    save_all(context)
            except Exception:
                pass
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å —Ç–∞–±–ª–∏—Ü–µ–π
        await update_main_survey(query, context)
        return

    elif query.data.startswith("reasons:"):
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏—á–∏–Ω (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
        _, block, page_str = query.data.split(":", 2)
        page = int(page_str)
        if update.effective_chat.type in ("group", "supergroup") and not await is_admin(update, context):
            await query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –ø—Ä–∏—á–∏–Ω—ã.", show_alert=True)
            return
        await open_reasons_menu(query, context, block, page)
        return

    elif query.data.startswith("reason_toggle:"):
        # reason_toggle:<block>:<key>:<page>
        _, block, key, page_str = query.data.split(":", 3)
        chat_id_str = str(update.effective_chat.id)
        status_all = get_status_from_votes(context, chat_id_str)
        st = status_all.setdefault(block, {"phase": None, "progress": None, "eta": None, "reasons": [], "comment": None})
        st.setdefault("reasons", [])
        if key in st["reasons"]:
            st["reasons"].remove(key)
        else:
            st["reasons"].append(key)
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–∏–ª–∏ 'other' ‚Äî —Å—Ä–∞–∑—É –∑–∞–ø—Ä–æ—Å–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–ø–ª–∞–µ–º
            if key == "other":
                prompt = await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"–û–ø–∏—à–∏—Ç–µ '–ò–Ω–æ–µ' –¥–ª—è {block} –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                    reply_markup=ForceReply(input_field_placeholder="–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π‚Ä¶", selective=True)
                )
                context.user_data["awaiting"] = {"type": "comment", "chat_id": update.effective_chat.id, "block": block, "reply_to": prompt.message_id, "user_id": query.from_user.id}
        save_all(context)
        await open_reasons_menu(query, context, block, int(page_str))
        return

    elif query.data.startswith("eta:"):
        block = query.data.split(":", 1)[1]
        if update.effective_chat.type in ("group", "supergroup") and not await is_admin(update, context):
            await query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å ETA.", show_alert=True)
            return
        today = datetime.date.today()
        await open_calendar(query, context, block, today.year, today.month)
        return

    elif query.data.startswith("caleta:"):
        # caleta:<block>:YYYY:MM ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –º–µ—Å—è—Ü–µ
        _, block, y, m = query.data.split(":", 3)
        await open_calendar(query, context, block, int(y), int(m))
        return

    elif query.data.startswith("caltype:"):
        # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞—Ç—ã
        block = query.data.split(":", 1)[1]
        # –ö–∞–∫ –∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ‚Äî –ø—Ä–æ—Å–∏–º –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (ForceReply)
        prompt = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É ETA –¥–ª—è {block} –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
            reply_markup=ForceReply(input_field_placeholder="YYYY-MM-DD", selective=True)
        )
        context.user_data["awaiting"] = {"type": "eta", "chat_id": update.effective_chat.id, "block": block, "reply_to": prompt.message_id, "user_id": query.from_user.id}
        return

    elif query.data.startswith("calpick:"):
        # calpick:<block>:YYYY-MM-DD ‚Äî –≤—ã–±—Ä–∞–Ω –¥–µ–Ω—å
        _, block, ds = query.data.split(":", 2)
        chat_id_str = str(update.effective_chat.id)
        status_all = get_status_from_votes(context, chat_id_str)
        st = status_all.setdefault(block, {"phase": None, "progress": None, "eta": None, "reasons": [], "comment": None})
        st["eta"] = ds
        save_all(context)
        # –ü–æ–∫–∞–∂–µ–º –≥–ª–∞–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
        await update_main_survey(query, context)
        return

    elif query.data.startswith("comment:"):
        block = query.data.split(":", 1)[1]
        if update.effective_chat.type in ("group", "supergroup") and not await is_admin(update, context):
            await query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.", show_alert=True)
            return
        # –í—Å–µ–≥–¥–∞ –ø—Ä–æ—Å–∏–º –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (ForceReply), –±–µ–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
        prompt = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è {block} –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
            reply_markup=ForceReply(input_field_placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π‚Ä¶", selective=True)
        )
        context.user_data["awaiting"] = {"type": "comment", "chat_id": update.effective_chat.id, "block": block, "reply_to": prompt.message_id, "user_id": query.from_user.id}
        return

    elif query.data.startswith("show:" ):
        # show:status:<block> –∏–ª–∏ show:reasons:<block>
        _, kind, block = query.data.split(":", 2)
        chat_id_str = str(update.effective_chat.id)
        status_all = get_status_from_votes(context, chat_id_str)
        bs = status_all.get(block, {}) if isinstance(status_all, dict) else {}
        if kind == "status":
            phase = bs.get("phase") or "‚Äî"
            prog = bs.get("progress")
            prog_str = f"{prog}%" if isinstance(prog, int) else "‚Äî"
            eta = bs.get("eta") or "‚Äî"
            header = f"üìä –°—Ç–∞—Ç—É—Å: {phase} {prog_str} ‚Ä¢ ETA {eta}"
        else:
            titles = _reason_titles_list(bs)
            header = "‚è± –ü—Ä–∏—á–∏–Ω—ã: " + (", ".join(titles) if titles else "‚Äî")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ posts –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ update_main_survey
        posts = get_posts(context)
        posts.setdefault(chat_id_str, {})["header"] = header
        _save(POSTS_PATH, posts)
        await update_main_survey(query, context)
        return

    elif ":" in query.data:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É
        try:
            block, score_str = query.data.split(":")
            score = int(score_str)
            assert block in BLOCKS and 1 <= score <= 10
        except Exception:
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–∞ –≤ status:<chat_id>
        chat_key = str(_get_query_chat_id(query) or update.effective_chat.id)
        status_map = get_status_from_votes(context, chat_key)
        bs = status_map.setdefault(block, {"phase": None, "progress": None, "eta": None, "reasons": [], "comment": None, "risk": None, "updated_by": None})
        bs["risk"] = score
        bs["updated_by"] = int(user.id)
        save_all(context)

        await query.answer(f"‚úÖ {block}: {score}/10")

        # –ü–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é (—Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ), —Å–æ—Ö—Ä–∞–Ω–∏–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π chat_id
        q_chat_id = _get_query_chat_id(query)
        if q_chat_id is not None:
            try:
                class DummyQuery:
                    def __init__(self, chat_id, message_id):
                        self._chat_id = chat_id
                        self._message_id = message_id
                    async def edit_message_text(self, text, parse_mode=None, reply_markup=None):
                        await context.bot.edit_message_text(chat_id=self._chat_id, message_id=self._message_id, text=text, parse_mode=parse_mode, reply_markup=reply_markup)
                # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                posts = get_posts(context)
                main_post = posts.get(str(q_chat_id), {}).get("main")
                if main_post and isinstance(main_post, dict) and "message_id" in main_post:
                    dummy_query = DummyQuery(q_chat_id, main_post["message_id"])
                    await update_main_survey(dummy_query, context)
                else:
                    await update_main_survey(query, context)
            except Exception:
                await update_main_survey(query, context)
        else:
            await update_main_survey(query, context)
        return

async def update_main_survey(query, context):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π"""
    votes = get_votes(context)
    chat_id_str = str(query._chat_id) if hasattr(query, "_chat_id") else str(query.message.chat_id)
    status_all = get_status_from_votes(context, chat_id_str)
    
    lines = ["üéØ *–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ VP4*\n"]
    lines.append("–û—Ü–µ–Ω–∏—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ —É–ª–æ–∂–∏—Ç—å—Å—è –≤ —Å—Ä–æ–∫ (1-10):")
    lines.append("1 –≤—Å–µ —à–∏–∫–∞—Ä–Ω–æ ‚Ä¢ 10 –æ–≥—Ä–æ–º–Ω—ã–π —Ä–∏—Å–∫\n")
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Å—Ç—Ä–æ–∫
    posts = get_posts(context)
    chat_posts = posts.setdefault(chat_id_str, {})
    expanded = set(chat_posts.get("expanded", []))

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ
    lines.append("\n_–¢–∞–ø –ø–æ –∫–Ω–æ–ø–∫–µ –±–ª–æ–∫–∞: ‚ñ∏/‚ñæ ‚Äî —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å, ‚öô ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏_")
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞-—Ç–∞–±–ª–∏—Ü–∞: —Å–ª–µ–≤–∞ ‚öô, —Å–ø—Ä–∞–≤–∞ –∫–Ω–æ–ø–∫–∞ –±–ª–æ–∫–∞ —Å —Ä–∏—Å–∫–æ–º –∏ —Ñ–∞–∑–æ–π/–ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º; –ø—Ä–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ ‚Äî ETA –∏ –ø—Ä–∏—á–∏–Ω—ã
    keyboard = []
    for block in BLOCKS:
        is_expanded = block in expanded
        arrow = "‚ñæ" if is_expanded else "‚ñ∏"
        bs = status_all.get(block, {}) if isinstance(status_all, dict) else {}
        risk = bs.get("risk") if isinstance(bs, dict) else None
        phase_val = (bs.get("phase") or "‚Äî") if isinstance(bs, dict) else None
        prog_val = bs.get("progress") if isinstance(bs, dict) else None
        left_btn = InlineKeyboardButton("‚öô", callback_data=f"vote:{block}")
        right_btn = InlineKeyboardButton(_format_block_button_text(block, risk, arrow, phase_val, prog_val), callback_data=f"toggle:{block}")
        keyboard.append([left_btn, right_btn])
        if is_expanded:
            phase = bs.get("phase") or "‚Äî"
            prog = bs.get("progress")
            prog_str = f"{prog}%" if isinstance(prog, int) else "‚Äî"
            eta = bs.get("eta") or "‚Äî"
            info_text = f"ETA {eta}"
            keyboard.append([
                InlineKeyboardButton("VP4 ETA", callback_data="noop"),
                InlineKeyboardButton(info_text, callback_data="noop")
            ])
            # –ü—Ä–∏—á–∏–Ω—ã –ø–æ—Å—Ç—Ä–æ—á–Ω–æ: –ø–µ—Ä–≤–∞—è —Å –º–µ—Ç–∫–æ–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å –ø—É—Å—Ç–æ–π –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π
            reason_titles = _reason_titles_list(bs)
            other_comment = _get_other_comment(bs)
            if reason_titles:
                for idx, title in enumerate(reason_titles):
                    if idx == 0:
                        keyboard.append([
                            InlineKeyboardButton("–ü—Ä–∏—á–∏–Ω—ã", callback_data="noop"),
                            InlineKeyboardButton(title, callback_data="noop")
                        ])
                    else:
                        keyboard.append([
                            InlineKeyboardButton(" ", callback_data="noop"),
                            InlineKeyboardButton(title, callback_data="noop")
                        ])
            if other_comment:
                keyboard.append([
                    InlineKeyboardButton("Others", callback_data="noop"),
                    InlineKeyboardButton(other_comment, callback_data="noop")
                ])
    
    await query.edit_message_text(
        "\n".join(lines), 
        parse_mode="Markdown", 
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def open_status_menu(query, context, block: str):
    chat_id_str = str(query.message.chat_id) if hasattr(query, "message") and query.message else str(query._chat_id)
    status_all = get_status_from_votes(context, chat_id_str)
    st = status_all.setdefault(block, {"phase": None, "progress": None, "eta": None, "reasons": [], "comment": None})
    phase = st.get("phase") or "‚Äî"
    progress = st.get("progress")
    progress_str = f"{progress}%" if isinstance(progress, int) else "‚Äî"
    eta = st.get("eta") or "‚Äî"
    comment = st.get("comment") or "‚Äî"

    text_lines = [f"‚öôÔ∏è *{block}* ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º\n"]
    text_lines.append(f"–§–∞–∑–∞: `{phase}` ‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: `{progress_str}` ‚Ä¢ ETA: `{eta}`")
    text_lines.append(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n")

    # –†—è–¥ –∫–Ω–æ–ø–æ–∫ —Ñ–∞–∑ VP1..VP5 (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
    phase_buttons = [InlineKeyboardButton(p, callback_data=f"phase:{block}|{p}") for p in PHASES]
    # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    prog_buttons = [
        InlineKeyboardButton("0%", callback_data=f"progress:{block}:0"),
        InlineKeyboardButton("25%", callback_data=f"progress:{block}:25"),
        InlineKeyboardButton("50%", callback_data=f"progress:{block}:50"),
        InlineKeyboardButton("75%", callback_data=f"progress:{block}:75"),
        InlineKeyboardButton("100%", callback_data=f"progress:{block}:100"),
        InlineKeyboardButton("‚úçÔ∏è", callback_data=f"progress:{block}:txt"),
    ]
    # –ù–∏–∂–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    bottom = [
        InlineKeyboardButton("‚è± –ü—Ä–∏—á–∏–Ω—ã", callback_data=f"reasons:{block}:0"),
        InlineKeyboardButton("üóì ETA", callback_data=f"eta:{block}"),
        InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç", callback_data=f"comment:{block}"),
    ]
    # –ö–Ω–æ–ø–∫–∞ WebApp-—Ñ–æ—Ä–º—ã (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω URL)
    try:
        chat_id_str = str(query.message.chat_id) if hasattr(query, "message") and query.message else str(query._chat_id)
    except Exception:
        chat_id_str = ""
    if WEBAPP_ENABLED and WEBAPP_URL and "<your-pages-domain>" not in WEBAPP_URL:
        webapp_button = InlineKeyboardButton("üìù –ö–æ–º–º–µ–Ω—Ç (—Ñ–æ—Ä–º–∞)", web_app=WebAppInfo(url=f"{WEBAPP_URL}?block={block}&chat_id={chat_id_str}"))
        bottom.append(webapp_button)
    back_btn = [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"vote:{block}")]

    keyboard = [phase_buttons, prog_buttons, bottom, back_btn]
    try:
        await query.edit_message_text("\n".join(text_lines), parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
    except BadRequest as e:
        if "Button_type_invalid" in str(e):
            bottom2 = [btn for btn in bottom if not (isinstance(btn, InlineKeyboardButton) and getattr(btn, "web_app", None))]
            keyboard2 = [phase_buttons, prog_buttons, bottom2, back_btn]
            await query.edit_message_text("\n".join(text_lines), parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard2))
        else:
            raise

async def open_status_menu_only_phase(query, context, block: str, show_progress: bool = False):
    chat_id_str = str(query.message.chat_id) if hasattr(query, "message") and query.message else str(query._chat_id)
    status_all = get_status_from_votes(context, chat_id_str)
    st = status_all.setdefault(block, {"phase": None, "progress": None, "eta": None, "reasons": [], "comment": None})
    phase = st.get("phase") or "‚Äî"
    progress = st.get("progress")
    progress_str = f"{progress}%" if isinstance(progress, int) else "‚Äî"
    eta = st.get("eta") or "‚Äî"

    text_lines = [f"‚öôÔ∏è *{block}* ‚Äî —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n"]
    text_lines.append(f"–§–∞–∑–∞: `{phase}` ‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: `{progress_str}` ‚Ä¢ ETA: `{eta}`\n")

    rows = []
    if not show_progress:
        # –§–∞–∑—ã –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ
        rows = [[InlineKeyboardButton(p, callback_data=f"phase:{block}|{p}")] for p in PHASES]
    else:
        # –¢–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        rows.append([InlineKeyboardButton("0%", callback_data=f"progress:{block}:0")])
        rows.append([InlineKeyboardButton("25%", callback_data=f"progress:{block}:25")])
        rows.append([InlineKeyboardButton("50%", callback_data=f"progress:{block}:50")])
        rows.append([InlineKeyboardButton("75%", callback_data=f"progress:{block}:75")])
        rows.append([InlineKeyboardButton("100%", callback_data=f"progress:{block}:100")])
        rows.append([InlineKeyboardButton("‚úçÔ∏è", callback_data=f"progress:{block}:txt")])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"vote:{block}")])
    await query.edit_message_text("\n".join(text_lines), parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(rows))

async def open_reasons_menu(query, context, block: str, page: int = 0):
    chat_id_str = str(query.message.chat_id) if hasattr(query, "message") and query.message else str(query._chat_id)
    status_all = get_status_from_votes(context, chat_id_str)
    st = status_all.setdefault(block, {"phase": None, "progress": None, "eta": None, "reasons": [], "comment": None})
    chat_id_str = str(query.message.chat_id) if hasattr(query, "message") and query.message else str(query._chat_id)
    status_all = get_status_from_votes(context, chat_id_str)
    st = status_all.setdefault(block, {"phase": None, "progress": None, "eta": None, "reasons": [], "comment": None})
    selected = set(st.get("reasons") or [])

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–∏—á–∏–Ω—ã –≤ –æ–¥–Ω–æ–º –º–µ–Ω—é –±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    page_reasons = REASONS

    lines = [f"‚è± –ü—Ä–∏—á–∏–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è *{block}*\n"]
    lines.append("–û—Ç–º–µ—Ç—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ")
    lines.append("\n–ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ ‚Äò‚úçÔ∏è‚Äô ‚Äî –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    kb_rows = []
    for key, title in page_reasons:
        mark = "‚òëÔ∏è" if key in selected else "‚¨ú"
        # –û—Ç–º–µ—Ç–∫–∞ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äî –±–µ–∑ –¥–æ–ø. –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        kb_rows.append([InlineKeyboardButton(f"{mark} {title}", callback_data=f"reason_toggle:{block}:{key}:{page}")])

    kb_rows.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="back:main")])

    await query.edit_message_text("\n".join(lines), parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(kb_rows))

async def open_calendar(query, context, block: str, year: int, month: int):
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    title = datetime.date(year, month, 1).strftime("%B %Y")
    lines = [f"üóì –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É ETA –¥–ª—è *{block}*\n", f"`{title}`"]

    # –°—Ç—Ä–æ–∫–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (–ü–Ω-–í—Å)
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    kb_rows = [[InlineKeyboardButton(d, callback_data="noop")] for d in []]  # placeholder not used
    kb_rows.append([InlineKeyboardButton(d, callback_data="noop") for d in week_days])

    cal = calendar.Calendar(firstweekday=0)  # –ü–Ω=0
    weeks = cal.monthdayscalendar(year, month)
    for w in weeks:
        row = []
        for day in w:
            if day == 0:
                row.append(InlineKeyboardButton(" ", callback_data="noop"))
            else:
                ds = f"{year:04d}-{month:02d}-{day:02d}"
                row.append(InlineKeyboardButton(str(day), callback_data=f"calpick:{block}:{ds}"))
        kb_rows.append(row)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    prev_year, prev_month = (year, month - 1)
    if prev_month == 0:
        prev_year -= 1
        prev_month = 12
    next_year, next_month = (year, month + 1)
    if next_month == 13:
        next_year += 1
        next_month = 1
    nav = [
        InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"caleta:{block}:{prev_year}:{prev_month}"),
        InlineKeyboardButton(title, callback_data="noop"),
        InlineKeyboardButton("‚û°Ô∏è", callback_data=f"caleta:{block}:{next_year}:{next_month}"),
    ]
    kb_rows.append(nav)

    # –î–æ–ø. –∫–Ω–æ–ø–∫–∏
    kb_rows.append([
        InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏", callback_data=f"caltype:{block}"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"vote:{block}"),
    ])

    await query.edit_message_text("\n".join(lines), parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(kb_rows))

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    wait = context.user_data.get("awaiting")
    if not wait:
        return
    # –î–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞/ETA –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –≤ —Ç–æ–º –∂–µ —á–∞—Ç–µ; –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏–∑ –ª—é–±–æ–≥–æ
    if wait.get("type") in ("progress", "eta") and wait.get("chat_id") != update.effective_chat.id:
        return
    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞—à prompt –ò–õ–ò –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if wait.get("type") == "comment":
        if not update.message or not update.message.reply_to_message:
            return
        replied = update.message.reply_to_message
        is_reply_to_prompt = wait.get("reply_to") and replied.message_id == wait.get("reply_to")
        is_reply_to_bot = getattr(replied.from_user, "is_bot", False)
        if not (is_reply_to_prompt or is_reply_to_bot):
            return
        # –†–∞–∑—Ä–µ—à–∏–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫—Ç–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
        if wait.get("user_id") and update.effective_user and update.effective_user.id != wait.get("user_id"):
            return
    if wait.get("type") == "progress" and wait.get("reply_to"):
        if not update.message or not update.message.reply_to_message or update.message.reply_to_message.message_id != wait.get("reply_to"):
            return
        if wait.get("user_id") and update.effective_user and update.effective_user.id != wait.get("user_id"):
            return
    if wait.get("type") == "eta" and wait.get("reply_to"):
        if not update.message or not update.message.reply_to_message or update.message.reply_to_message.message_id != wait.get("reply_to"):
            return
        if wait.get("user_id") and update.effective_user and update.effective_user.id != wait.get("user_id"):
            return
    block = wait.get("block")
    target_chat_id = wait.get("chat_id") or update.effective_chat.id
    chat_id_str = str(target_chat_id)
    status_all = get_status_from_votes(context, chat_id_str)
    st = status_all.setdefault(block, {"phase": None, "progress": None, "eta": None, "reasons": [], "comment": None})

    t = wait.get("type")
    text = (update.message.text or "").strip()
    if t == "progress":
        try:
            val = int(text)
            if 0 <= val <= 100:
                st["progress"] = val
                save_all(context)
                # –£–¥–∞–ª–∏–º –æ—Ç–≤–µ—Ç –∏ prompt
                try:
                    await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
                except Exception:
                    pass
                if wait.get("reply_to"):
                    try:
                        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=wait.get("reply_to"))
                    except Exception:
                        pass
                try:
                    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è {block}: {val}%")
                except Exception:
                    pass
            else:
                await update.message.reply_text("–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0..100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return
        except Exception:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 0..100.")
            return
    elif t == "eta":
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ YYYY-MM-DD
        if len(text) == 10 and text[4] == '-' and text[7] == '-':
            st["eta"] = text
            save_all(context)
            # –£–¥–∞–ª–∏–º –æ—Ç–≤–µ—Ç –∏ prompt
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
            except Exception:
                pass
            if wait.get("reply_to"):
                try:
                    await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=wait.get("reply_to"))
                except Exception:
                    pass
            try:
                await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚úÖ ETA –¥–ª—è {block}: {text}")
            except Exception:
                pass
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è YYYY-MM-DD.")
            return
    elif t == "comment":
        st["comment"] = text
        save_all(context)
        # –£–¥–∞–ª–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ prompt, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
        except Exception:
            pass
        if wait.get("reply_to") and update.message.reply_to_message and update.message.reply_to_message.message_id == wait.get("reply_to"):
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=wait.get("reply_to"))
            except Exception:
                pass
        # –û—Ç–ø—Ä–∞–≤–∏–º –∫–æ—Ä–æ—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≤–∏–¥–µ ephemeral-–∞–ª–µ—Ä—Ç–∞ –Ω–µ–ª—å–∑—è; –ø—Ä–∏—à–ª—ë–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª–∏–º —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ –Ω–µ–ª—å–∑—è –±–µ–∑ scheduler.
        try:
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è {block} —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        except Exception:
            pass
    else:
        return

    # –°–±—Ä–æ—Å –æ–∂–∏–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    context.user_data["awaiting"] = None
    posts = get_posts(context)
    main_post = posts.get(chat_id_str, {}).get("main")
    if main_post and isinstance(main_post, dict) and "message_id" in main_post:
        try:
            class DummyQuery:
                def __init__(self, chat_id, message_id):
                    self._chat_id = chat_id
                    self._message_id = message_id
                async def edit_message_text(self, text, parse_mode=None, reply_markup=None):
                    await context.bot.edit_message_text(chat_id=self._chat_id, message_id=self._message_id, text=text, parse_mode=parse_mode, reply_markup=reply_markup)
            dummy_query = DummyQuery(update.effective_chat.id, main_post["message_id"])
            await update_main_survey(dummy_query, context)
        except Exception:
            pass

async def on_webapp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not getattr(msg, "web_app_data", None):
        return
    try:
        payload = msg.web_app_data.data or "{}"
        data = json.loads(payload)
    except Exception:
        await msg.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã.")
        return
    block = data.get("block")
    comment = data.get("comment")
    phase = data.get("phase")
    progress = data.get("progress")
    eta = data.get("eta")
    reasons = data.get("reasons") or []
    chat_id = str(data.get("chat_id") or msg.chat.id)
    if not block or block not in BLOCKS or not isinstance(comment, str):
        await msg.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã.")
        return
    status_all = get_status_from_votes(context, chat_id)
    st = status_all.setdefault(block, {"phase": None, "progress": None, "eta": None, "reasons": [], "comment": None})
    if isinstance(comment, str):
        st["comment"] = comment.strip()
    if isinstance(phase, str) and phase in PHASES:
        st["phase"] = phase
    try:
        p = int(progress)
        if 0 <= p <= 100:
            st["progress"] = p
    except Exception:
        pass
    if isinstance(eta, str) and len(eta) == 10 and eta[4] == '-' and eta[7] == '-':
        st["eta"] = eta
    if isinstance(reasons, list):
        st["reasons"] = [r for r in reasons if isinstance(r, str)]
    save_all(context)
    await msg.reply_text(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {block}")
    # –û–±–Ω–æ–≤–∏–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    posts = get_posts(context)
    main_post = posts.get(chat_id, {}).get("main")
    if main_post and isinstance(main_post, dict) and "message_id" in main_post:
        try:
            class DummyQuery:
                def __init__(self, chat_id, message_id):
                    self._chat_id = chat_id
                    self._message_id = message_id
                async def edit_message_text(self, text, parse_mode=None, reply_markup=None):
                    await context.bot.edit_message_text(chat_id=self._chat_id, message_id=self._message_id, text=text, parse_mode=parse_mode, reply_markup=reply_markup)
            dummy_query = DummyQuery(int(chat_id), main_post["message_id"])
            await update_main_survey(dummy_query, context)
        except Exception:
            pass

## inline handlers —É–¥–∞–ª–µ–Ω—ã

async def cmd_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –≤ –≥—Ä—É–ø–ø–µ
    if update.effective_chat.type in ("group", "supergroup"):
        if not await is_admin(update, context):
            await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å /reset –≤ –≥—Ä—É–ø–ø–µ.")
            return
    
    # –û—á–∏—Å—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤ (–≤ –ø–∞–º—è—Ç–∏ –∏ –≤ —Ñ–∞–π–ª–µ)
    votes = get_votes(context)
    votes.clear()
    save_all(context)

    # –û–±–Ω–æ–≤–∏–º –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    posts = get_posts(context)
    chat_id = str(update.effective_chat.id)
    main_post = posts.get(chat_id, {}).get("main")
    if main_post and isinstance(main_post, dict) and "message_id" in main_post:
        try:
            class DummyQuery:
                def __init__(self, chat_id, message_id):
                    self._chat_id = chat_id
                    self._message_id = message_id
                async def edit_message_text(self, text, parse_mode=None, reply_markup=None):
                    await context.bot.edit_message_text(chat_id=self._chat_id, message_id=self._message_id, text=text, parse_mode=parse_mode, reply_markup=reply_markup)
            dummy_query = DummyQuery(int(chat_id), main_post["message_id"])
            await update_main_survey(dummy_query, context)
            await update.message.reply_text("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")
            return
        except Exception:
            pass
    
    # –ï—Å–ª–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º —Å–±—Ä–æ—Å
    await update.message.reply_text("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")

async def cmd_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é –æ—Ü–µ–Ω–∫—É –∏–∑ status:<chat_id>
    status_map = get_status_from_votes(context, chat_id)
    
    lines = ["üìä *–°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –±–ª–æ–∫–∞–º VP4:*\n"]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–∏—Å–∫–∞ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    for b in BLOCKS:
        bs = status_map.get(b, {})
        score = bs.get("risk") if isinstance(bs, dict) else None
        if isinstance(score, int):
            color, description = get_risk_info(score)
            lines.append(f"{color} *{b}*: {score}/10 ({description})")
        else:
            lines.append(f"‚ö™ *{b}*: ‚Äî (–Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫)")
    
    lines.append("\nüìà –®–∫–∞–ª–∞: 1 ‚Äî –≤—Å–µ –æ–∫; 10 ‚Äî –∫—Ä–∏—Ç–∏—á–Ω–æ")
    lines.append("üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ ‚Ä¢ üü° –£–º–µ—Ä–µ–Ω–Ω—ã–π ‚Ä¢ üü† –°—Ä–µ–¥–Ω–∏–π ‚Ä¢ üî¥ –í—ã—Å–æ–∫–∏–π")
    
    await update.message.reply_text("\n".join(lines), parse_mode="Markdown")

async def cmd_clearvote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—á–∏—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –±–ª–æ–∫—É –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
    # –°–∏–Ω—Ç–∞–∫—Å–∏—Å: /clearvote <user_id> <block>
    if update.effective_chat.type in ("group", "supergroup"):
        if not await is_admin(update, context):
            await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /clearvote –≤ –≥—Ä—É–ø–ø–µ.")
            return
    text = (update.message.text or "").strip()
    parts = text.split(maxsplit=2)
    if len(parts) < 3:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /clearvote <user_id> <block>")
        return
    try:
        target_user_id = int(parts[1])
    except Exception:
        await update.message.reply_text("user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    block = parts[2].strip()
    if block not in BLOCKS:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫.")
        return

    votes = get_votes(context)
    uid_key = str(target_user_id)
    changed = False
    if uid_key in votes and isinstance(votes[uid_key], dict) and block in votes[uid_key]:
        del votes[uid_key][block]
        if not votes[uid_key]:
            del votes[uid_key]
        changed = True

    # –ï—Å–ª–∏ "–ø–æ—Å–ª–µ–¥–Ω—è—è" –æ—Ü–µ–Ω–∫–∞ (–≤–Ω—É—Ç—Ä–∏ votes –ø–æ–¥ —Å–ø–µ—Ü-–∫–ª—é—á–æ–º) –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞–ª–∞ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî —É–±–µ—Ä—ë–º –µ—ë
    chat_key = str(update.effective_chat.id)
    # legacy latest map —É–¥–∞–ª—ë–Ω ‚Äî –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ —á–∏—Å—Ç–∏–º –∑–¥–µ—Å—å

    if not changed:
        await update.message.reply_text("–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å: –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    save_all(context)
    await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: user {target_user_id}, –±–ª–æ–∫ {block}")

    # –ü–µ—Ä–µ—Ä–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    posts = get_posts(context)
    main_post = posts.get(chat_key, {}).get("main")
    if main_post and isinstance(main_post, dict) and "message_id" in main_post:
        try:
            class DummyQuery:
                def __init__(self, chat_id, message_id):
                    self._chat_id = chat_id
                    self._message_id = message_id
                async def edit_message_text(self, text, parse_mode=None, reply_markup=None):
                    await context.bot.edit_message_text(chat_id=self._chat_id, message_id=self._message_id, text=text, parse_mode=parse_mode, reply_markup=reply_markup)
            dummy_query = DummyQuery(update.effective_chat.id, main_post["message_id"])
            await update_main_survey(dummy_query, context)
        except Exception:
            pass

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("survey", cmd_survey))
    app.add_handler(CommandHandler("results", cmd_results))
    app.add_handler(CommandHandler("clearvote", cmd_clearvote))
    app.add_handler(CommandHandler("reset", cmd_reset))
    app.add_handler(CallbackQueryHandler(on_button))
    # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/ETA/–ø—Ä–æ–≥—Ä–µ—Å—Å)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
    app.add_handler(MessageHandler(filters.ALL, on_webapp))
    app.run_polling()

if __name__ == "__main__":
    main()
